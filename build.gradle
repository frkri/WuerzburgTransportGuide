plugins {
	id 'java'
	id 'application'
	id 'org.javamodularity.moduleplugin' version '1.8.12'
	id 'org.openjfx.javafxplugin' version '0.1.0'
	id 'org.beryx.jlink' version '3.0.1'
	id "org.openapi.generator" version "7.2.0"
	id "com.diffplug.spotless" version "6.24.0"
}

group 'io.github'
version '1.0'

repositories {
	mavenCentral()
}

ext {
	junitVersion = '5.10.1'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

application {
	mainModule = 'io.github.wuerzburgtransportguide'
	mainClass = 'io.github.wuerzburgtransportguide.HelloApplication'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
	main {
		java {
			srcDir(layout.buildDirectory.dir("generated-sources/src/main/java"))
		}
	}
}

dependencies {
	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
	implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0-M1'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'org.jetbrains:annotations:24.1.0'

	testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}


openApiGenerate {
	generatorName.set("java")
	library.set("retrofit2")
	inputSpec.set("$rootDir/specs/netzplan.yml")
	outputDir.set(layout.buildDirectory.dir("generated-sources").map {
		it.asFile.absolutePath
	})
	apiPackage.set("io.github.wuerzburgtransportguide.api")
	modelPackage.set("io.github.wuerzburgtransportguide.model")
	ignoreFileOverride.set("$rootDir/specs/.openapi-generator-ignore")
	configOptions.set([dateLibrary: "java8", useJakartaEe: "true"])

	// Models can be found under io.github.wuerzburgtransportguide.model
	// GSON Deserializers can be found under io.github.wuerzburgtransportguide.client.adapters
	typeMappings.set(['string+coordinates':'Coordinates','string+coordinatesList':'CoordinatesList','string+locale':'Locale','string+localDateTime':'LocalDateTime','string+url':'URL'])
	importMappings.set(['Coordinates':'io.github.wuerzburgtransportguide.model.Coordinates','CoordinatesList':'io.github.wuerzburgtransportguide.model.CoordinatesList','Locale':'java.util.Locale','LocalDateTime':'java.time.LocalDateTime','URL':'java.net.URL'])

	generateApiDocumentation.set(false)
	generateModelDocumentation.set(false)
	generateModelTests.set(false)
	generateApiTests.set(false)
}

spotless {
	groovyGradle {
		target '*.gradle'
		greclipse()
		endWithNewline()
	}
	java {
		importOrder()
		targetExclude('**/generated-sources/**')

		// Clean up & Format
		removeUnusedImports()
		cleanthat()
		googleJavaFormat().aosp().formatJavadoc(true).reorderImports(true).reflowLongStrings(true)
		formatAnnotations()
		endWithNewline()
	}
	format 'fxml', {
		target 'src/**/*.fxml'
		eclipseWtp('xml').configFile("$rootDir/preferences/wst/xml.prefs")
		endWithNewline()
	}
	format 'css', {
		target 'src/**/*.css'
		eclipseWtp('css').configFile("$rootDir/preferences/wst/css.prefs")
		endWithNewline()
	}
}

javafx {
	version = '21.0.1'
	modules = [
		'javafx.controls',
		'javafx.fxml'
	]
}

test {
	useJUnitPlatform()
}

jlink {
	imageZip = layout.buildDirectory.file("distributions/app-${javafx.platform.classifier}.zip")
	options = [
		'--strip-debug',
		'--compress',
		'zip-6',
		'--no-header-files',
		'--no-man-pages'
	]
	mergedModule {
		excludeRequires('org.jetbrains.annotations')
	}
	launcher {
		name = 'WuerzburgTransportGuide'
	}
}

jlinkZip {
	group = 'distribution'
}

compileJava.dependsOn(tasks.named("spotlessApply"))
compileJava.dependsOn(tasks.named("openApiGenerate"))
